#+TITLE: Network Distances
#+AUTHOR: David James
#+DATE: 2020 Feb 27

This project calculates the network traveling distance between a source and destination point on a map.
It uses Open Source Routing Machine ([[http://project-osrm.org/][OSRM]]) software to generate the map and perform the calculations inside a Docker container.

Project was created by [[https://github.com/dj-2805/][David James]] for the Institute of Transportation Studies(ITS).

* Design
  1. Program was implemented with Python 3.7 alongside Docker and the OSRM
  2. It maintains the following dependencies
        | Packages                   |
        |----------------------------|
        | pandas                     |
        | numpy                      |
        | requests                   |
        | multiprocessing (included) |
        | logging (included)         |
  3. The program needs the Docker container running before the Python script executes
**  Files
   - networkDistance.py :: This file calculates the source and destination pairs of data from a csv and outputs a csv of their distance in meters.
     - the source and destination pairs should be in a csv and given in FIPS code values
   - results/commutes20191121-0938-ForkPoolWorker-20.EXAMPLE.csv :: This is an example output from the networkDistance.py. It follows a year,month,day format followed by the timestamp and the Worker ID number.
     - the output from networkDistance will output four files. These processes are separated to ensure RAM doesn't crash when running a larger data set. Process may be updated in the future.
* Installing and Setting Up
  Before beginning, you will need to run any bash commands from your terminal.
  If you're running a Mac, search for the application called ~terminal~.

  1. _Installing Docker_
     1. There are several ways to install Docker depending on your machine follow [[https://docs.docker.com/install/][this]] link and read the instructions for your machine to get the platform running
     2. After installing Docker, sometimes priviledges are needed for the container to run on the system
        #+BEGIN_SRC bash
          # This command is to make sure that docker has the right priviledges to run
          sudo usermod -a -G docker $USER $ groups
        #+END_SRC
        - NOTE :: I mainly note this if someone is newly installing Docker. The installation instructions covered everything else, but this final command is needed someontimes depending on the environment you're running in. Once this is executed and Docker is running, then you don't need to run this command again.
  2. _Collect files_
     1. You will need the map file, so OSRM knows what area to generate
        - the map file is downloaded from [[http://download.geofabrik.de/][here]] go through the subregions until you find the map resolution that you need and download the =.osm.pbf= file
          #+BEGIN_SRC bash
            # this is the command to get the CALIFORNIA map
            # if a different region is wanted change the URL, so it pulls the same file
            wget http://download.geofabrik.de/north-america/us/california-latest.osm.pbf

            # this command is just the bash way of downloading the file
            # going to the website and downloading it through the browser will yield the same results
          #+END_SRC
  3. _Generate server files_
     1. Create a directory called =map= and insert your ~pbf~ file into it
     2. From inside the directory run the following command
        #+BEGIN_SRC bash
          # These first commands are needed when first running OSRM on your machine
          # commands take about 5-10 mins to execute
          # these only need to be run once per machine, unless you need a different type of map
          docker run -t -v "${PWD}:/data" osrm/osrm-backend osrm-extract -p /opt/car.lua /data/california-latest.osm.pbf
        #+END_SRC
* Executing
  1. _Starting the OSRM server_
     1. These commands need to be executed within the =map= directory
        #+BEGIN_SRC bash
          # These commands are for setting up the OSRM server on your machine
          # command take about 5-10 mins to execute
          # these commands need to be run every time you want to boot up the server
          docker run -t -v "${PWD}:/data" osrm/osrm-backend osrm-partition /data/california-latest.osrm
          docker run -t -v "${PWD}:/data" osrm/osrm-backend osrm-customize /data/california-latest.osrm
          docker run -t -i -p 5000:5000 -v "${PWD}:/data" osrm/osrm-backend osrm-routed --algorithm mld /data/california-latest.osrm
          # At this point the server is running and you can run the python script now

          # This command is meant for calling the server
          # NOTE: it is already implemented in python script, so using this is uncessary
          #       unless you are just trying to make your own specific call
          curl "http://127.0.0.1:5000/route/v1/driving/slon,slat;dlon,dlat?steps=true"
          # @param: source - {slon, slat}
          # @param: destination - {dlon,dlat}
        #+END_SRC
  2. _Access the OSRM server_
     1. The Python script, ~networkDistance.py~, has a function that will call the server and collect the responses
        #+BEGIN_SRC python
          # importing driver function from .py file
          from networkDistance import mp_networkDriver

          # string of path to csv
          path = 'some/path/to/your/file.csv'
          # strings of GEOID columns of csv
          startGeoIDCol = 'name of start Geo ID column'
          endGeoIDCol = 'name of end Geo ID column'

          # the following is the function header for the input and how the data needs to be organized
          # NOTE: even though your csv file may have extra columns
          #       this program will only look at the two Geo ID columns given

          # ################################################################################
          # function mp_networkDriver
          # A function designed to work with multiprocessing
          # where it'll run the previous designed functions
          # NOTE: This will crash if the docker OSRM isn't running beforehand
          # @param:
          #              path - str, path to CSV file that will be prococcsed
          #     startGeoIDCol - str, name of column that has the starting GEOIDs
          #       endGeoIDCol - str, name of column that has the ending GEOIDs
          # @return: NONE
          mp_networkDriver(path,startGeoIDCol,endGeoIDCol)
        #+END_SRC
        - NOTE ::
          - The GEOIDS are meant to be FIPS Codes
          - this is the function that would be called if importing the =.py= file into your own project
